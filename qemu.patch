diff --git a/.gitignore b/.gitignore
index 88a80ff..27994c7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+/build
 /config-devices.*
 /config-all-devices.*
 /config-all-disas.*
@@ -109,3 +110,4 @@ cscope.*
 tags
 TAGS
 *~
+*.swp
diff --git a/auto.sh b/auto.sh
new file mode 100755
index 0000000..1d4725e
--- /dev/null
+++ b/auto.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+cd build
+make -j 8
+make install
diff --git a/cpus.c b/cpus.c
index 23cf7aa..22411c7 100644
--- a/cpus.c
+++ b/cpus.c
@@ -71,6 +71,8 @@ static CPUState *next_cpu;
 int64_t max_delay;
 int64_t max_advance;
 
+extern int cpu_start;
+
 /* vcpu throttling controls */
 static QEMUTimer *throttle_timer;
 static unsigned int throttle_percentage;
@@ -1026,6 +1028,28 @@ static void qemu_kvm_wait_io_event(CPUState *cpu)
     qemu_wait_io_event_common(cpu);
 }
 
+#include <sched.h>
+#include <pthread.h>
+
+#ifndef CPU_ZERO
+#define CPU_ZERO(cpusetp)	__CPU_ZERO_S(sizeof(cpu_set_t), cpusetp)
+#define CPU_SET(cpu, cpusetp)	__CPU_SET_S(cpu, sizeof(cpu_set_t), cpusetp)
+#endif
+#define cpuset_t cpu_set_t
+
+static int bind_cpu(int cpuid)
+{
+	cpuset_t mask;
+	CPU_ZERO(&mask);
+	CPU_SET(cpuid, &mask);
+
+	if (pthread_setaffinity_np(pthread_self(), sizeof(mask), &mask) != 0) {
+		printf("pthread_setaffinity_np failed\n");
+		return -1;
+	}
+	return 0;
+}
+
 static void *qemu_kvm_cpu_thread_fn(void *arg)
 {
     CPUState *cpu = arg;
@@ -1034,6 +1058,8 @@ static void *qemu_kvm_cpu_thread_fn(void *arg)
     rcu_register_thread();
 
     qemu_mutex_lock_iothread();
+    printf("cpu_index: %d\n", cpu->cpu_index);
+    bind_cpu(cpu->cpu_index + cpu_start); // start from the 4th physical core.
     qemu_thread_get_self(cpu->thread);
     cpu->thread_id = qemu_get_thread_id();
     cpu->can_do_io = 1;
@@ -1348,8 +1374,15 @@ static void qemu_kvm_start_vcpu(CPUState *cpu)
     qemu_cond_init(cpu->halt_cond);
     snprintf(thread_name, VCPU_THREAD_NAME_SIZE, "CPU %d/KVM",
              cpu->cpu_index);
-    qemu_thread_create(cpu->thread, thread_name, qemu_kvm_cpu_thread_fn,
-                       cpu, QEMU_THREAD_JOINABLE);
+
+    if (cpu->cpu_index == 0) {
+        qemu_thread_create(cpu->thread, thread_name, qemu_kvm_cpu_thread_fn,
+                           cpu, QEMU_THREAD_REALTIME);
+    } else {
+        qemu_thread_create(cpu->thread, thread_name, qemu_kvm_cpu_thread_fn,
+                           cpu, QEMU_THREAD_JOINABLE);
+    }
+
     while (!cpu->created) {
         qemu_cond_wait(&qemu_cpu_cond, &qemu_global_mutex);
     }
diff --git a/exec.c b/exec.c
index f398d21..42f5825 100644
--- a/exec.c
+++ b/exec.c
@@ -20,6 +20,10 @@
 #ifndef _WIN32
 #include <sys/mman.h>
 #endif
+#include <execinfo.h>
+#include <unistd.h>
+#include <execinfo.h>
+#include <unistd.h>
 
 #include "qemu-common.h"
 #include "cpu.h"
@@ -1272,6 +1276,9 @@ static void *file_ram_alloc(RAMBlock *block,
 
             filename = g_strdup_printf("%s/qemu_back_mem.%s.XXXXXX", path,
                                        sanitized_name);
+            if (strcmp(sanitized_name, "pc.ram") == 0) {
+                block->flags |= RAM_SHARED;
+            }
             g_free(sanitized_name);
 
             fd = mkstemp(filename);
@@ -1316,6 +1323,8 @@ static void *file_ram_alloc(RAMBlock *block,
         perror("ftruncate");
     }
 
+    printf("fd: %d block->flags: %x Ram_shared: %x\n",
+		(int)fd, block->flags, RAM_SHARED);
     area = qemu_ram_mmap(fd, memory, page_size, block->flags & RAM_SHARED);
     if (area == MAP_FAILED) {
         error_setg_errno(errp, errno,
diff --git a/hw/virtio/vhost-user.c b/hw/virtio/vhost-user.c
index 7ed3dd9..6d3e63e 100644
--- a/hw/virtio/vhost-user.c
+++ b/hw/virtio/vhost-user.c
@@ -58,6 +58,7 @@ typedef enum VhostUserRequest {
     VHOST_USER_GET_QUEUE_NUM = 17,
     VHOST_USER_SET_VRING_ENABLE = 18,
     VHOST_USER_SEND_RARP = 19,
+    VHOST_USER_SEND_HYPERCALL = 20,
     VHOST_USER_MAX
 } VhostUserRequest;
 
@@ -630,6 +631,23 @@ static bool vhost_user_can_merge(struct vhost_dev *dev,
     return mfd == rfd;
 }
 
+static int vhost_user_send_hypercall(struct vhost_dev *dev, uint64_t addr,
+			uint64_t len, uint64_t vcpu, int pid, int reset)
+{
+	VhostUserMsg msg = {
+		.request = VHOST_USER_SEND_HYPERCALL,
+		.flags = VHOST_USER_VERSION,
+		.payload.addr.desc_user_addr = addr,
+		.payload.addr.used_user_addr = len,
+		.payload.addr.avail_user_addr = vcpu,
+		.payload.addr.index = pid,
+		.payload.addr.flags = reset,
+		.size = sizeof(msg.payload.addr),
+	};
+	vhost_user_write(dev, &msg, NULL, 0);
+	return 0;
+}
+
 const VhostOps user_ops = {
         .backend_type = VHOST_BACKEND_TYPE_USER,
         .vhost_backend_init = vhost_user_init,
@@ -653,4 +671,5 @@ const VhostOps user_ops = {
         .vhost_requires_shm_log = vhost_user_requires_shm_log,
         .vhost_migration_done = vhost_user_migration_done,
         .vhost_backend_can_merge = vhost_user_can_merge,
+        .vhost_send_hypercall = vhost_user_send_hypercall,
 };
diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
index 392d848..9e8efe0 100644
--- a/hw/virtio/vhost.c
+++ b/hw/virtio/vhost.c
@@ -26,6 +26,9 @@
 #include "hw/virtio/virtio-access.h"
 #include "migration/migration.h"
 
+#include <sys/types.h>
+#include <unistd.h>
+
 static struct vhost_log *vhost_log;
 static struct vhost_log *vhost_log_shm;
 
@@ -1298,3 +1301,30 @@ void vhost_dev_stop(struct vhost_dev *hdev, VirtIODevice *vdev)
     hdev->log_size = 0;
 }
 
+/* Vhost send hypercall */
+/*
+ * TODO specify which vhost-dev.
+ * Now suppose all virtio devices use the same mempool.
+ */
+void vhost_dev_send_hypercall(uint64_t addr, uint64_t len, uint64_t vcpu)
+{
+#if 0
+    struct vhost_dev *hdev;
+    hdev = vhost_devices.lh_first;
+    if (hdev->vhost_ops->backend_type != VHOST_BACKEND_TYPE_USER)
+        return;
+    hdev->vhost_ops->vhost_send_hypercall(hdev, addr, len, vcpu);
+#endif
+
+    struct vhost_dev *hdev;
+    int pid = getpid();
+    int reset = 1;
+
+    QLIST_FOREACH(hdev, &vhost_devices, entry) {
+        if (hdev->vhost_ops->backend_type != VHOST_BACKEND_TYPE_USER)
+            continue;
+        hdev->vhost_ops->vhost_send_hypercall(hdev, addr, len, vcpu, pid, reset);
+        reset = 0;
+        g_usleep(100);
+    }
+}
diff --git a/include/hw/virtio/vhost-backend.h b/include/hw/virtio/vhost-backend.h
index 95fcc96..477c3c4 100644
--- a/include/hw/virtio/vhost-backend.h
+++ b/include/hw/virtio/vhost-backend.h
@@ -72,6 +72,8 @@ typedef int (*vhost_migration_done_op)(struct vhost_dev *dev,
 typedef bool (*vhost_backend_can_merge_op)(struct vhost_dev *dev,
                                            uint64_t start1, uint64_t size1,
                                            uint64_t start2, uint64_t size2);
+typedef int (*vhost_send_hypercall_op)(struct vhost_dev *dev, uint64_t addr,
+                                       uint64_t len, uint64_t vcpu, int pid, int reset);
 
 typedef struct VhostOps {
     VhostBackendType backend_type;
@@ -100,6 +102,7 @@ typedef struct VhostOps {
     vhost_requires_shm_log_op vhost_requires_shm_log;
     vhost_migration_done_op vhost_migration_done;
     vhost_backend_can_merge_op vhost_backend_can_merge;
+    vhost_send_hypercall_op vhost_send_hypercall;
 } VhostOps;
 
 extern const VhostOps user_ops;
diff --git a/include/hw/virtio/vhost.h b/include/hw/virtio/vhost.h
index b60d758..006a3f8 100644
--- a/include/hw/virtio/vhost.h
+++ b/include/hw/virtio/vhost.h
@@ -85,4 +85,6 @@ uint64_t vhost_get_features(struct vhost_dev *hdev, const int *feature_bits,
 void vhost_ack_features(struct vhost_dev *hdev, const int *feature_bits,
                         uint64_t features);
 bool vhost_has_free_slot(void);
+
+void vhost_dev_send_hypercall(uint64_t addr, uint64_t len, uint64_t vcpu);
 #endif
diff --git a/include/qemu/thread.h b/include/qemu/thread.h
index bdae6df..6b6f29d 100644
--- a/include/qemu/thread.h
+++ b/include/qemu/thread.h
@@ -16,6 +16,7 @@ typedef struct QemuThread QemuThread;
 
 #define QEMU_THREAD_JOINABLE 0
 #define QEMU_THREAD_DETACHED 1
+#define QEMU_THREAD_REALTIME 3
 
 void qemu_mutex_init(QemuMutex *mutex);
 void qemu_mutex_destroy(QemuMutex *mutex);
diff --git a/kvm-all.c b/kvm-all.c
index 44c0464..94f38ae 100644
--- a/kvm-all.c
+++ b/kvm-all.c
@@ -37,6 +37,8 @@
 #include "trace.h"
 #include "hw/irq.h"
 
+#include "hw/virtio/vhost.h"
+
 #include "hw/boards.h"
 
 /* This check must be after config-host.h is included */
@@ -49,7 +51,7 @@
  */
 #define PAGE_SIZE getpagesize()
 
-//#define DEBUG_KVM
+// #define DEBUG_KVM
 
 #ifdef DEBUG_KVM
 #define DPRINTF(fmt, ...) \
@@ -640,6 +642,15 @@ static void kvm_set_phys_mem(KVMMemoryListener *kml,
     ram_addr_t size = int128_get64(section->size);
     void *ram = NULL;
     unsigned delta;
+    FILE *fp = fopen("debug.info", "a+");
+
+    fprintf(fp, "---------------Here we come--------------\n");
+    fprintf(fp, "memory region:\n"
+           "add: %d\n"
+           "start_addr: %llu\n"
+           "size: %lu\n",
+           (int)add, (unsigned long long)start_addr, (unsigned long)size);
+    fclose(fp);
 
     /* kvm works in page size chunks, but the function may be called
        with sub-page size and unaligned start address. Pad the start
@@ -1689,6 +1700,15 @@ void kvm_set_sigmask_len(KVMState *s, unsigned int sigmask_len)
     s->sigmask_len = sigmask_len;
 }
 
+/* TODO standardizing the hypercall API. */
+/* TODO specify which vhost-dev to use.
+ * We should specify it from the guset.
+ * */
+static void kvm_handle_hypercall(uint64_t nr, uint64_t addr, uint64_t len, uint64_t vcpu)
+{
+    vhost_dev_send_hypercall(addr, len, vcpu);
+}
+
 static void kvm_handle_io(uint16_t port, MemTxAttrs attrs, void *data, int direction,
                           int size, uint32_t count)
 {
@@ -1805,6 +1825,9 @@ int kvm_cpu_exec(CPUState *cpu)
 
     DPRINTF("kvm_cpu_exec()\n");
 
+    run_ret = kvm_vcpu_ioctl(cpu, KVM_GET_TEST, 0);
+    fprintf(stderr, "we did it %d\n", run_ret);
+
     if (kvm_arch_process_async_events(cpu)) {
         cpu->exit_request = 0;
         return EXCP_HLT;
@@ -1858,7 +1881,7 @@ int kvm_cpu_exec(CPUState *cpu)
         trace_kvm_run_exit(cpu->cpu_index, run->exit_reason);
         switch (run->exit_reason) {
         case KVM_EXIT_IO:
-            DPRINTF("handle_io\n");
+            // DPRINTF("handle_io\n");
             /* Called outside BQL */
             kvm_handle_io(run->io.port, attrs,
                           (uint8_t *)run + run->io.data_offset,
@@ -1868,7 +1891,7 @@ int kvm_cpu_exec(CPUState *cpu)
             ret = 0;
             break;
         case KVM_EXIT_MMIO:
-            DPRINTF("handle_mmio\n");
+            // DPRINTF("handle_mmio\n");
             /* Called outside BQL */
             address_space_rw(&address_space_memory,
                              run->mmio.phys_addr, attrs,
@@ -1877,6 +1900,16 @@ int kvm_cpu_exec(CPUState *cpu)
                              run->mmio.is_write);
             ret = 0;
             break;
+        case KVM_EXIT_HYPERCALL:
+            /*
+             * TODO send read the info from run, send it to vhost.
+             */
+            kvm_handle_hypercall(run->hypercall.nr,
+                                 run->hypercall.args[0],
+                                 run->hypercall.args[1],
+				 run->hypercall.args[2]);
+            ret = 0;
+            break;
         case KVM_EXIT_IRQ_WINDOW_OPEN:
             DPRINTF("irq_window_open\n");
             ret = EXCP_INTERRUPT;
@@ -1892,6 +1925,7 @@ int kvm_cpu_exec(CPUState *cpu)
             ret = -1;
             break;
         case KVM_EXIT_INTERNAL_ERROR:
+            DPRINTF("internal error\n");
             ret = kvm_handle_internal_error(cpu, run);
             break;
         case KVM_EXIT_SYSTEM_EVENT:
diff --git a/linux-headers/linux/kvm.h b/linux-headers/linux/kvm.h
index 4a56b9e..6731c22 100644
--- a/linux-headers/linux/kvm.h
+++ b/linux-headers/linux/kvm.h
@@ -1251,6 +1251,8 @@ struct kvm_s390_ucas_mapping {
 /* Available with KVM_CAP_X86_SMM */
 #define KVM_SMI                   _IO(KVMIO,   0xb7)
 
+#define KVM_GET_TEST		  _IO(KVMIO,   0xcc)
+
 #define KVM_DEV_ASSIGN_ENABLE_IOMMU	(1 << 0)
 #define KVM_DEV_ASSIGN_PCI_2_3		(1 << 1)
 #define KVM_DEV_ASSIGN_MASK_INTX	(1 << 2)
diff --git a/util/qemu-thread-posix.c b/util/qemu-thread-posix.c
index 74a3023..2075833 100644
--- a/util/qemu-thread-posix.c
+++ b/util/qemu-thread-posix.c
@@ -465,6 +465,23 @@ void qemu_thread_create(QemuThread *thread, const char *name,
         }
     }
 
+    if (mode == QEMU_THREAD_REALTIME) {
+         struct sched_param param;
+         err = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
+         if (err) {
+             error_exit(err, __func__);
+         }
+         err = pthread_attr_setschedpolicy(&attr, SCHED_RR);
+         if (err) {
+             error_exit(err, __func__);
+         }
+         param.sched_priority = 1;
+         err = pthread_attr_setschedparam(&attr, &param);
+         if (err) {
+             error_exit(err, __func__);
+         }
+    }
+
     /* Leave signal handling to the iothread.  */
     sigfillset(&set);
     pthread_sigmask(SIG_SETMASK, &set, &oldset);
diff --git a/vl.c b/vl.c
index ca49e75..73dd0b6 100644
--- a/vl.c
+++ b/vl.c
@@ -182,6 +182,8 @@ uint8_t qemu_extra_params_fw[2];
 
 int icount_align_option;
 
+int cpu_start;
+
 /* The bytes in qemu_uuid[] are in the order specified by RFC4122, _not_ in the
  * little-endian "wire format" described in the SMBIOS 2.6 specification.
  */
@@ -3045,6 +3047,14 @@ int main(int argc, char **argv, char **envp)
 
     autostart = 1;
 
+    optind = 1;
+    if (strcmp(argv[optind], "-set_cpu_start") == 0) {
+	    cpu_start = atoi(argv[optind+1]);
+	    argc -= 2;
+	    argv += 2;
+    }
+
+
     /* first pass of option parsing */
     optind = 1;
     while (optind < argc) {
